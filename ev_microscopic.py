import streamlit as st
import cv2
import numpy as np
import tensorflow as tf
from PIL import Image
import os
import io

# --- 1. Streamlit Configuration ---
st.set_page_config(
    page_title="Pinworm Disease Diagnosis",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üî¨ Pinworm Disease Diagnosis App")
st.header("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö!")
st.markdown("""
‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö **‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡πÄ‡∏Ç‡πá‡∏°‡∏´‡∏°‡∏∏‡∏î (_Enterobius vermicularis_)**
‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
""")

# Using object notation for sidebar navigation
add_selectbox = st.sidebar.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:",
    ("‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡πÄ‡∏Ç‡πá‡∏°‡∏´‡∏°‡∏∏‡∏î", "üîé AI detection")
)

# --- 2. Model Loading (Cached for Efficiency) ---
# NOTE: In a real environment, 'ev_cnn_mobile.keras' must be present in the directory.
# Since we are in an execution environment without guaranteed external files, 
# we must assume the path is correct for local testing.
@st.cache_resource
def load_detection_model():
    """Loads the TensorFlow/Keras model using Streamlit's resource cache."""
    try:
        # Assuming the model is named 'ev_cnn_mobile.keras'
        model_path = 'ev_cnn_mobile.keras' 
        # We use compile=False if the model is already saved with weights and architecture
        # and we don't need to retrain or recompile the graph.
        model = tf.keras.models.load_model(model_path, compile=False)
        return model
    except Exception as e:
        # If the model file is not found, display an error and return None
        st.error(f"Error loading model: {e}")
        st.error("Please ensure the 'ev_cnn_mobile.keras' file is in the application directory.")
        return None

model = load_detection_model()
class_label = ["Artifact", "Ev eggs"]
patch_sizes = {1: (500, 500)} # Only targeting Ev eggs with index 1
step_size = 50

# --- 3. Object Detection Function ---

def drawbox(img, label, a, b, c, d, box_size):
    """Draws a bounding box and label on the image."""
    # Ensure coordinates are within image boundaries
    a = max(0, a)
    b = min(img.shape[0], b)
    c = max(0, c)
    d = min(img.shape[1], d)

    # Use BGR colors for OpenCV
    image = cv2.rectangle(img, (c, a), (d, b), (0, 255, 0), 5) # Green box, thicker
    
    # Use a smaller font size for better visibility
    font_scale = 1.5
    image = cv2.putText(image, label, (c, a - 10), cv2.FONT_HERSHEY_DUPLEX, font_scale, (255, 0, 255), 2)
    return image

def ObjectDet(img):
    """
    Performs sliding window object detection on the input image array.
    
    Args:
        img (np.array): The input image as a NumPy array (H, W, C).
    
    Returns:
        np.array: The image with detected boxes drawn on it.
    """
    if model is None:
        return img # Return original image if model failed to load
        
    img_output = np.array(img)
    img_height, img_width = img_output.shape[:2]
    
    # Track the best result found for each class based on the highest score
    # We only care about class_idx 1 (Ev eggs) based on patch_sizes definition
    best_results = [{'score': 0, 'loc': None, 'patch_size': None} for _ in class_label]
    
    detection_found = False

    # Since patch_sizes only contains key 1, we iterate only over that.
    # We assume class_idx 1 corresponds to "Ev eggs" based on class_label
    class_idx = 1 
    box_size_y, box_size_x = patch_sizes[class_idx]
    
    # Sliding window logic
    for i in range(0, img_height - box_size_y + 1, step_size):
        for j in range(0, img_width - box_size_x + 1, step_size):
            img_patch = img_output[i:i+box_size_y, j:j+box_size_x]
            
            # Skip if the patch is incomplete (shouldn't happen with range setup, but safe check)
            if img_patch.shape[0] != box_size_y or img_patch.shape[1] != box_size_x:
                continue

            # Pre-process the patch for the 64x64 input model
            img_patch_resized = cv2.resize(img_patch, (64, 64), interpolation=cv2.INTER_AREA)
            img_patch_resized = np.expand_dims(img_patch_resized, axis=0)
            
            # Predict
            try:
                # Normalize image patch if the model was trained on normalized data (0-1 or -1 to 1)
                # Assuming the model expects values in 0-255 based on original code style.
                y_outp = model.predict(img_patch_resized, verbose=0)
                y_pred = y_outp[0]
            except Exception as e:
                st.warning(f"Prediction error: {e}")
                continue

            # Get the score for the target class (Ev eggs)
            score = y_pred[class_idx]
            
            # Check if this patch is better than the current best result and meets the high confidence threshold
            if score > best_results[class_idx]['score'] and score > 0.95:
                best_results[class_idx] = {'score': score, 'loc': (i, j), 'patch_size': (box_size_y, box_size_x)}
                detection_found = True

    # Draw the best bounding box(es) found
    if detection_found:
        result = best_results[class_idx]
        
        label = f"{class_label[class_idx]}: {result['score']:.2f}"
        i, j = result['loc']
        box_size_y, box_size_x = result['patch_size']
        
        # Calculate bounding box coordinates
        a, b, c, d = i, i+box_size_y, j, j+box_size_x
        
        # Draw the box on the output image
        img_output = drawbox(img_output, label, a, b, c, d, box_size_x//2)
    else:
        st.info("No Pinworm eggs detected with high confidence (score > 0.95).")

    return img_output

# --- 4. Streamlit UI Flow (Section Logic) ---

if add_selectbox == "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡πÄ‡∏Ç‡πá‡∏°‡∏´‡∏°‡∏∏‡∏î":
    st.markdown("## üìö ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡πÄ‡∏Ç‡πá‡∏°‡∏´‡∏°‡∏∏‡∏î")
    st.markdown("""
    **‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡πÄ‡∏Ç‡πá‡∏°‡∏´‡∏°‡∏∏‡∏î (_Enterobius vermicularis_)** ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å 
    
    ### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    ‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏µ‡∏¢‡∏à‡∏∞‡∏ß‡∏≤‡∏á‡πÑ‡∏Ç‡πà‡∏£‡∏≠‡∏ö‡πÜ ‡∏ó‡∏ß‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏ô ‡πÑ‡∏Ç‡πà‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÑ‡∏Ç‡πà‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏ö‡∏ô
    
    ### ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£
    * ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏ß‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å (‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô)
    * ‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏¥‡∏ó ‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î
    * ‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏™‡πâ
    
    ### ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
    1.  ‡∏•‡πâ‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥
    2.  ‡∏ï‡∏±‡∏î‡πÄ‡∏•‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÑ‡∏Ç‡πà‡∏û‡∏¢‡∏≤‡∏ò‡∏¥
    3.  ‡∏ã‡∏±‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏£‡πâ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥
    
    **‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    """)

elif add_selectbox == "üîé AI detection":
    st.markdown("## üîé AI Detection (‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡πÄ‡∏Ç‡πá‡∏°‡∏´‡∏°‡∏∏‡∏î)")
    st.markdown("‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏∏‡∏•‡∏ó‡∏£‡∏£‡∏®‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡πÑ‡∏Ç‡πà‡∏û‡∏¢‡∏≤‡∏ò‡∏¥ (Tape Test/Swab Test) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (PNG, JPG, JPEG, TIF)", type=["png", "jpg", "jpeg", "tif"])
    
    if uploaded_file is not None:
        try:
            # Read the file from the uploader
            image = Image.open(uploaded_file)
            image_np = np.array(image.convert("RGB")) # Ensure it's 3-channel (RGB)
            
            # Convert RGB to BGR for OpenCV processing (mandatory for cv2 functions)
            image_bgr = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR)

            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
                st.image(image_np, caption=uploaded_file.name, use_column_width=True)

            if model:
                # Perform detection
                with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ AI...'):
                    output_img_bgr = ObjectDet(image_bgr)
                
                # Convert the result back to RGB for Streamlit display
                output_img_rgb = cv2.cvtColor(output_img_bgr, cv2.COLOR_BGR2RGB)
                
                with col2:
                    st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                    st.image(output_img_rgb, caption="‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏Ç‡πà‡∏û‡∏¢‡∏≤‡∏ò‡∏¥ (‡∏ñ‡πâ‡∏≤‡∏û‡∏ö)", use_column_width=True)
            else:
                 with col2:
                    st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                    st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•")

        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {e}")
            st.error("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
            st.code(e, language='python') # Show error for debugging

